
Int32 n;
String path = "C:/Users/born2befree/source/repos/graphs/graphs/gr3.txt";
string str = null;
char[] delimiterChars = { ' ', ',', '.', ':', '\t', '\n','\u000d' };
String[] dims;
using (var fin = new StreamReader(path))
{

    dims = fin.ReadToEnd().Split(delimiterChars, StringSplitOptions.RemoveEmptyEntries);
    n = Int32.Parse(dims[0]);
}
List<GraphofCities.City> cities = new List<GraphofCities.City>();
Boolean[,] graph = new Boolean[n,n];
for (int i = 1; i <= 3*n; i+=3)
{
    cities.Add(new GraphofCities.City(dims[i], (i-1) / 3, Double.Parse(dims[i + 1]), Double.Parse(dims[i + 2])));
}
for (int c = 0; c < n; c++)
{
    for (int j = 0; j < n; j++)
    {
        graph[c, j] = (String.Compare(dims[3*n+1+ c * n + j], "1")==0?true:false);
       
            

    }
}
Console.WriteLine();
GraphofCities example = new(cities,graph);
List<String> avoid = new List<String>();
int avoidcount = int.Parse(Console.ReadLine());
for(int i = 0;i<avoidcount;++i)
{
    avoid.Add(Console.ReadLine());
}
example.Show();
var dist = example.Shortestfromavoid("Березовка", "Октябрьское", avoid);
foreach(var d in dist)
{
    Console.WriteLine(d);
}
